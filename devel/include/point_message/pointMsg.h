// Generated by gencpp from file point_message/pointMsg.msg
// DO NOT EDIT!


#ifndef POINT_MESSAGE_MESSAGE_POINTMSG_H
#define POINT_MESSAGE_MESSAGE_POINTMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace point_message
{
template <class ContainerAllocator>
struct pointMsg_
{
  typedef pointMsg_<ContainerAllocator> Type;

  pointMsg_()
    : xCoor(0)
    , yCoor(0)
    , radius(0)  {
    }
  pointMsg_(const ContainerAllocator& _alloc)
    : xCoor(0)
    , yCoor(0)
    , radius(0)  {
    }



   typedef int32_t _xCoor_type;
  _xCoor_type xCoor;

   typedef int32_t _yCoor_type;
  _yCoor_type yCoor;

   typedef int32_t _radius_type;
  _radius_type radius;




  typedef boost::shared_ptr< ::point_message::pointMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::point_message::pointMsg_<ContainerAllocator> const> ConstPtr;

}; // struct pointMsg_

typedef ::point_message::pointMsg_<std::allocator<void> > pointMsg;

typedef boost::shared_ptr< ::point_message::pointMsg > pointMsgPtr;
typedef boost::shared_ptr< ::point_message::pointMsg const> pointMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::point_message::pointMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::point_message::pointMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace point_message

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'point_message': ['/home/peter/thrust_vis/src/imu_msgs/msg'], 'std_msgs': ['/opt/ros/jade/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::point_message::pointMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::point_message::pointMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::point_message::pointMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::point_message::pointMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::point_message::pointMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::point_message::pointMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::point_message::pointMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ee65d36311fdfaf03b60b9402901b990";
  }

  static const char* value(const ::point_message::pointMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xee65d36311fdfaf0ULL;
  static const uint64_t static_value2 = 0x3b60b9402901b990ULL;
};

template<class ContainerAllocator>
struct DataType< ::point_message::pointMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "point_message/pointMsg";
  }

  static const char* value(const ::point_message::pointMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::point_message::pointMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 xCoor\n\
int32 yCoor\n\
int32 radius\n\
";
  }

  static const char* value(const ::point_message::pointMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::point_message::pointMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.xCoor);
      stream.next(m.yCoor);
      stream.next(m.radius);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct pointMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::point_message::pointMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::point_message::pointMsg_<ContainerAllocator>& v)
  {
    s << indent << "xCoor: ";
    Printer<int32_t>::stream(s, indent + "  ", v.xCoor);
    s << indent << "yCoor: ";
    Printer<int32_t>::stream(s, indent + "  ", v.yCoor);
    s << indent << "radius: ";
    Printer<int32_t>::stream(s, indent + "  ", v.radius);
  }
};

} // namespace message_operations
} // namespace ros

#endif // POINT_MESSAGE_MESSAGE_POINTMSG_H
